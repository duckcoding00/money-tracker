// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: income.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteIncome = `-- name: DeleteIncome :exec
delete from incomes where id = $1
`

func (q *Queries) DeleteIncome(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteIncome, id)
	return err
}

const getIncome = `-- name: GetIncome :one
select id, user_id, amount, source, created_at
from incomes
where id = $1
`

func (q *Queries) GetIncome(ctx context.Context, id string) (Income, error) {
	row := q.db.QueryRow(ctx, getIncome, id)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const getIncomes = `-- name: GetIncomes :many
select id, user_id, amount, source, created_at
from incomes
where user_id = $1
`

func (q *Queries) GetIncomes(ctx context.Context, userID int32) ([]Income, error) {
	rows, err := q.db.Query(ctx, getIncomes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Income
	for rows.Next() {
		var i Income
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Source,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncomesByMonth = `-- name: GetIncomesByMonth :many
select id, user_id, amount, source, created_at
from incomes
where user_id = $1
and created_at >= date_trunc('month', $2::timestamptz)
and created_at < date_trunc('month', $2::timestamptz) + interval '1 month'
order by created_at desc
`

type GetIncomesByMonthParams struct {
	UserID  int32
	Column2 pgtype.Timestamptz
}

func (q *Queries) GetIncomesByMonth(ctx context.Context, arg GetIncomesByMonthParams) ([]Income, error) {
	rows, err := q.db.Query(ctx, getIncomesByMonth, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Income
	for rows.Next() {
		var i Income
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Source,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertIncome = `-- name: InsertIncome :one
insert into incomes(id, user_id, amount, source, created_at)
values ($1, $2, $3, $4, $5)
returning id, user_id, amount, source, created_at
`

type InsertIncomeParams struct {
	ID        string
	UserID    int32
	Amount    int32
	Source    pgtype.Text
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertIncome(ctx context.Context, arg InsertIncomeParams) (Income, error) {
	row := q.db.QueryRow(ctx, insertIncome,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Source,
		arg.CreatedAt,
	)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const updateIncome = `-- name: UpdateIncome :one
update incomes set amount = $1, source = $2
where id = $3
returning id, user_id, amount, source, created_at
`

type UpdateIncomeParams struct {
	Amount int32
	Source pgtype.Text
	ID     string
}

func (q *Queries) UpdateIncome(ctx context.Context, arg UpdateIncomeParams) (Income, error) {
	row := q.db.QueryRow(ctx, updateIncome, arg.Amount, arg.Source, arg.ID)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const updateIncomeSource = `-- name: UpdateIncomeSource :one
update incomes set source = $1
where id = $2
returning id, user_id, amount, source, created_at
`

type UpdateIncomeSourceParams struct {
	Source pgtype.Text
	ID     string
}

func (q *Queries) UpdateIncomeSource(ctx context.Context, arg UpdateIncomeSourceParams) (Income, error) {
	row := q.db.QueryRow(ctx, updateIncomeSource, arg.Source, arg.ID)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const getIncomesByWeek = `-- name: getIncomesByWeek :many
select id, user_id, amount, source, created_at
from incomes
where user_id = $1
and created_at >= date_trunc('week', $2::timestamptz)
and created_at < date_trunc('week', $2::timestamptz) + interval '7 days'
order by created_at desc
`

type getIncomesByWeekParams struct {
	UserID  int32
	Column2 pgtype.Timestamptz
}

func (q *Queries) getIncomesByWeek(ctx context.Context, arg getIncomesByWeekParams) ([]Income, error) {
	rows, err := q.db.Query(ctx, getIncomesByWeek, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Income
	for rows.Next() {
		var i Income
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Source,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
