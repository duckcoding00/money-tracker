// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserByID = `-- name: DeleteUserByID :exec
delete from users
where id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, username, email, password, is_active, created_at, updated_at
from users 
where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, username, email, password, is_active, created_at, updated_at
from users 
where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, username, email, password, is_active, created_at, updated_at
from users 
where username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
insert into users (username, email, password, is_active)
values ($1, $2, $3, false)
returning id
`

type InsertUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Username, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateEmail = `-- name: UpdateEmail :one
update users
set email = $1
where id = $2
returning email
`

type UpdateEmailParams struct {
	Email string
	ID    int32
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (string, error) {
	row := q.db.QueryRow(ctx, updateEmail, arg.Email, arg.ID)
	var email string
	err := row.Scan(&email)
	return email, err
}

const updateIsActive = `-- name: UpdateIsActive :one
update users 
set is_active = true 
where username = $1
returning is_active
`

func (q *Queries) UpdateIsActive(ctx context.Context, username string) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, updateIsActive, username)
	var is_active pgtype.Bool
	err := row.Scan(&is_active)
	return is_active, err
}

const updatePassword = `-- name: UpdatePassword :one
update users
set password = $1
where id = $2
returning password
`

type UpdatePasswordParams struct {
	Password string
	ID       int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (string, error) {
	row := q.db.QueryRow(ctx, updatePassword, arg.Password, arg.ID)
	var password string
	err := row.Scan(&password)
	return password, err
}

const updateUsername = `-- name: UpdateUsername :one
update users 
set username = $1
where id = $2
returning username
`

type UpdateUsernameParams struct {
	Username string
	ID       int32
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateUsername, arg.Username, arg.ID)
	var username string
	err := row.Scan(&username)
	return username, err
}
