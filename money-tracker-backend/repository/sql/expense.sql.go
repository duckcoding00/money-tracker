// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: expense.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteExpense = `-- name: DeleteExpense :exec
delete from expenses where id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteExpense, id)
	return err
}

const getExpense = `-- name: GetExpense :one
select id, user_id, amount, description, category, created_at
from expenses where id = $1
`

func (q *Queries) GetExpense(ctx context.Context, id string) (Expense, error) {
	row := q.db.QueryRow(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const getExpenses = `-- name: GetExpenses :many
select id, user_id, amount, description, category, created_at
from expenses where user_id = $1
order by created_at desc
`

func (q *Queries) GetExpenses(ctx context.Context, userID int32) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByMonth = `-- name: GetExpensesByMonth :many
select id, user_id, amount, description, category, created_at
from expenses
where user_id = $1
and created_at >= date_trunc('month', $2::timestamptz)
and created_at < date_trunc('month', $2::timestamptz) + interval '1 month'
order by created_at desc
`

type GetExpensesByMonthParams struct {
	UserID  int32
	Column2 pgtype.Timestamptz
}

func (q *Queries) GetExpensesByMonth(ctx context.Context, arg GetExpensesByMonthParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getExpensesByMonth, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByWeek = `-- name: GetExpensesByWeek :many
select id, user_id, amount, description, category, created_at
from expenses
where user_id = $1
and created_at >= date_trunc('week', $2::timestamptz)
and created_at < date_trunc('week', $2::timestamptz) + interval '7 days'
order by created_at desc
`

type GetExpensesByWeekParams struct {
	UserID  int32
	Column2 pgtype.Timestamptz
}

func (q *Queries) GetExpensesByWeek(ctx context.Context, arg GetExpensesByWeekParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getExpensesByWeek, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertExpense = `-- name: InsertExpense :one
insert into expenses (id, user_id, amount, description, category, created_at)
values ($1, $2, $3, $4, $5, $6)
returning id, user_id, amount, description, category, created_at
`

type InsertExpenseParams struct {
	ID          string
	UserID      int32
	Amount      int32
	Description pgtype.Text
	Category    ExpenseCategory
	CreatedAt   pgtype.Timestamptz
}

func (q *Queries) InsertExpense(ctx context.Context, arg InsertExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, insertExpense,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.Category,
		arg.CreatedAt,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const updateExpense = `-- name: UpdateExpense :one
update expenses set amount = $1, description = $2, category = $3
where id = $4
returning id, user_id, amount, description, category, created_at
`

type UpdateExpenseParams struct {
	Amount      int32
	Description pgtype.Text
	Category    ExpenseCategory
	ID          string
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, updateExpense,
		arg.Amount,
		arg.Description,
		arg.Category,
		arg.ID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}
