// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSessionByToken = `-- name: GetSessionByToken :one
select user_id, token, created_at, expired_at
from sessions
where token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getSessionByUserID = `-- name: GetSessionByUserID :one
select user_id, token, created_at, expired_at
from sessions
where user_id = $1
`

func (q *Queries) GetSessionByUserID(ctx context.Context, userID int32) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByUserID, userID)
	var i Session
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :exec
insert into sessions (user_id, token, created_at, expired_at)
values ($1, $2, $3, $4)
on conflict (user_id)
do update set 
            token = excluded.token, 
            expired_at = excluded.expired_at, 
            created_at = excluded.created_at
`

type InsertSessionParams struct {
	UserID    int32
	Token     string
	CreatedAt pgtype.Timestamptz
	ExpiredAt pgtype.Timestamptz
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) error {
	_, err := q.db.Exec(ctx, insertSession,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiredAt,
	)
	return err
}
